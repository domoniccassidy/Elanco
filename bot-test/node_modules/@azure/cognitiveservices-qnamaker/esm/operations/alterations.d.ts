import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { QnAMakerClientContext } from "../qnAMakerClientContext";
/** Class representing a Alterations. */
export declare class Alterations {
    private readonly client;
    /**
     * Create a Alterations.
     * @param {QnAMakerClientContext} client Reference to the service client.
     */
    constructor(client: QnAMakerClientContext);
    /**
     * @summary Download alterations from runtime.
     * @param [options] The optional parameters
     * @returns Promise<Models.AlterationsGetResponse>
     */
    get(options?: msRest.RequestOptionsBase): Promise<Models.AlterationsGetResponse>;
    /**
     * @param callback The callback
     */
    get(callback: msRest.ServiceCallback<Models.WordAlterationsDTO>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WordAlterationsDTO>): void;
    /**
     * @summary Replace alterations data.
     * @param wordAlterations New alterations data.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    replace(wordAlterations: Models.WordAlterationsDTO, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param wordAlterations New alterations data.
     * @param callback The callback
     */
    replace(wordAlterations: Models.WordAlterationsDTO, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param wordAlterations New alterations data.
     * @param options The optional parameters
     * @param callback The callback
     */
    replace(wordAlterations: Models.WordAlterationsDTO, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Download alterations per Knowledgebase (QnAMaker Managed).
     * @param kbId Knowledgebase id.
     * @param [options] The optional parameters
     * @returns Promise<Models.AlterationsGetAlterationsForKbResponse>
     */
    getAlterationsForKb(kbId: string, options?: msRest.RequestOptionsBase): Promise<Models.AlterationsGetAlterationsForKbResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param callback The callback
     */
    getAlterationsForKb(kbId: string, callback: msRest.ServiceCallback<Models.WordAlterationsDTO>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAlterationsForKb(kbId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WordAlterationsDTO>): void;
    /**
     * @summary Replace alterations data per Knowledgebase (QnAMaker Managed).
     * @param kbId Knowledgebase id.
     * @param wordAlterations New alterations data.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    replaceAlterationsForKb(kbId: string, wordAlterations: Models.WordAlterationsDTO, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param wordAlterations New alterations data.
     * @param callback The callback
     */
    replaceAlterationsForKb(kbId: string, wordAlterations: Models.WordAlterationsDTO, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param wordAlterations New alterations data.
     * @param options The optional parameters
     * @param callback The callback
     */
    replaceAlterationsForKb(kbId: string, wordAlterations: Models.WordAlterationsDTO, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
//# sourceMappingURL=alterations.d.ts.map
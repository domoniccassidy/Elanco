import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { QnAMakerClientContext } from "../qnAMakerClientContext";
/** Class representing a Knowledgebase. */
export declare class Knowledgebase {
    private readonly client;
    /**
     * Create a Knowledgebase.
     * @param {QnAMakerClientContext} client Reference to the service client.
     */
    constructor(client: QnAMakerClientContext);
    /**
     * @summary Gets all knowledgebases for a user.
     * @param [options] The optional parameters
     * @returns Promise<Models.KnowledgebaseListAllResponse>
     */
    listAll(options?: msRest.RequestOptionsBase): Promise<Models.KnowledgebaseListAllResponse>;
    /**
     * @param callback The callback
     */
    listAll(callback: msRest.ServiceCallback<Models.KnowledgebasesDTO>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KnowledgebasesDTO>): void;
    /**
     * @summary Gets details of a specific knowledgebase.
     * @param kbId Knowledgebase id.
     * @param [options] The optional parameters
     * @returns Promise<Models.KnowledgebaseGetDetailsResponse>
     */
    getDetails(kbId: string, options?: msRest.RequestOptionsBase): Promise<Models.KnowledgebaseGetDetailsResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param callback The callback
     */
    getDetails(kbId: string, callback: msRest.ServiceCallback<Models.KnowledgebaseDTO>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getDetails(kbId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KnowledgebaseDTO>): void;
    /**
     * @summary Deletes the knowledgebase and all its data.
     * @param kbId Knowledgebase id.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(kbId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param callback The callback
     */
    deleteMethod(kbId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(kbId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Publishes all changes in test index of a knowledgebase to its prod index.
     * @param kbId Knowledgebase id.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    publish(kbId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param callback The callback
     */
    publish(kbId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param options The optional parameters
     * @param callback The callback
     */
    publish(kbId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Replace knowledgebase contents.
     * @param kbId Knowledgebase id.
     * @param replaceKb An instance of ReplaceKbDTO which contains list of qnas to be uploaded
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    replace(kbId: string, replaceKb: Models.ReplaceKbDTO, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param replaceKb An instance of ReplaceKbDTO which contains list of qnas to be uploaded
     * @param callback The callback
     */
    replace(kbId: string, replaceKb: Models.ReplaceKbDTO, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param replaceKb An instance of ReplaceKbDTO which contains list of qnas to be uploaded
     * @param options The optional parameters
     * @param callback The callback
     */
    replace(kbId: string, replaceKb: Models.ReplaceKbDTO, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Asynchronous operation to modify a knowledgebase.
     * @param kbId Knowledgebase id.
     * @param updateKb Post body of the request.
     * @param [options] The optional parameters
     * @returns Promise<Models.KnowledgebaseUpdateResponse>
     */
    update(kbId: string, updateKb: Models.UpdateKbOperationDTO, options?: msRest.RequestOptionsBase): Promise<Models.KnowledgebaseUpdateResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param updateKb Post body of the request.
     * @param callback The callback
     */
    update(kbId: string, updateKb: Models.UpdateKbOperationDTO, callback: msRest.ServiceCallback<Models.Operation>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param updateKb Post body of the request.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(kbId: string, updateKb: Models.UpdateKbOperationDTO, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Operation>): void;
    /**
     * @summary Asynchronous operation to create a new knowledgebase.
     * @param createKbPayload Post body of the request.
     * @param [options] The optional parameters
     * @returns Promise<Models.KnowledgebaseCreateResponse>
     */
    create(createKbPayload: Models.CreateKbDTO, options?: msRest.RequestOptionsBase): Promise<Models.KnowledgebaseCreateResponse>;
    /**
     * @param createKbPayload Post body of the request.
     * @param callback The callback
     */
    create(createKbPayload: Models.CreateKbDTO, callback: msRest.ServiceCallback<Models.Operation>): void;
    /**
     * @param createKbPayload Post body of the request.
     * @param options The optional parameters
     * @param callback The callback
     */
    create(createKbPayload: Models.CreateKbDTO, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Operation>): void;
    /**
     * @summary Download the knowledgebase.
     * @param kbId Knowledgebase id.
     * @param environment Specifies whether environment is Test or Prod. Possible values include:
     * 'Prod', 'Test'
     * @param [options] The optional parameters
     * @returns Promise<Models.KnowledgebaseDownloadResponse>
     */
    download(kbId: string, environment: Models.EnvironmentType, options?: Models.KnowledgebaseDownloadOptionalParams): Promise<Models.KnowledgebaseDownloadResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param environment Specifies whether environment is Test or Prod. Possible values include:
     * 'Prod', 'Test'
     * @param callback The callback
     */
    download(kbId: string, environment: Models.EnvironmentType, callback: msRest.ServiceCallback<Models.QnADocumentsDTO>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param environment Specifies whether environment is Test or Prod. Possible values include:
     * 'Prod', 'Test'
     * @param options The optional parameters
     * @param callback The callback
     */
    download(kbId: string, environment: Models.EnvironmentType, options: Models.KnowledgebaseDownloadOptionalParams, callback: msRest.ServiceCallback<Models.QnADocumentsDTO>): void;
    /**
     * @summary GenerateAnswer call to query knowledgebase (QnA Maker Managed).
     * @param kbId Knowledgebase id.
     * @param generateAnswerPayload Post body of the request.
     * @param [options] The optional parameters
     * @returns Promise<Models.KnowledgebaseGenerateAnswerResponse>
     */
    generateAnswer(kbId: string, generateAnswerPayload: Models.QueryDTO, options?: msRest.RequestOptionsBase): Promise<Models.KnowledgebaseGenerateAnswerResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param generateAnswerPayload Post body of the request.
     * @param callback The callback
     */
    generateAnswer(kbId: string, generateAnswerPayload: Models.QueryDTO, callback: msRest.ServiceCallback<Models.QnASearchResultList>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param generateAnswerPayload Post body of the request.
     * @param options The optional parameters
     * @param callback The callback
     */
    generateAnswer(kbId: string, generateAnswerPayload: Models.QueryDTO, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QnASearchResultList>): void;
    /**
     * @summary Train call to add suggestions to knowledgebase (QnAMaker Managed).
     * @param kbId Knowledgebase id.
     * @param trainPayload Post body of the request.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    train(kbId: string, trainPayload: Models.FeedbackRecordsDTO, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param trainPayload Post body of the request.
     * @param callback The callback
     */
    train(kbId: string, trainPayload: Models.FeedbackRecordsDTO, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param trainPayload Post body of the request.
     * @param options The optional parameters
     * @param callback The callback
     */
    train(kbId: string, trainPayload: Models.FeedbackRecordsDTO, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
//# sourceMappingURL=knowledgebase.d.ts.map
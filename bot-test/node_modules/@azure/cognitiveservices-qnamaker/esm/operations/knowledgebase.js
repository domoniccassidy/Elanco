/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/knowledgebaseMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Knowledgebase. */
var Knowledgebase = /** @class */ (function () {
    /**
     * Create a Knowledgebase.
     * @param {QnAMakerClientContext} client Reference to the service client.
     */
    function Knowledgebase(client) {
        this.client = client;
    }
    Knowledgebase.prototype.listAll = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listAllOperationSpec, callback);
    };
    Knowledgebase.prototype.getDetails = function (kbId, options, callback) {
        return this.client.sendOperationRequest({
            kbId: kbId,
            options: options
        }, getDetailsOperationSpec, callback);
    };
    Knowledgebase.prototype.deleteMethod = function (kbId, options, callback) {
        return this.client.sendOperationRequest({
            kbId: kbId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Knowledgebase.prototype.publish = function (kbId, options, callback) {
        return this.client.sendOperationRequest({
            kbId: kbId,
            options: options
        }, publishOperationSpec, callback);
    };
    Knowledgebase.prototype.replace = function (kbId, replaceKb, options, callback) {
        return this.client.sendOperationRequest({
            kbId: kbId,
            replaceKb: replaceKb,
            options: options
        }, replaceOperationSpec, callback);
    };
    Knowledgebase.prototype.update = function (kbId, updateKb, options, callback) {
        return this.client.sendOperationRequest({
            kbId: kbId,
            updateKb: updateKb,
            options: options
        }, updateOperationSpec, callback);
    };
    Knowledgebase.prototype.create = function (createKbPayload, options, callback) {
        return this.client.sendOperationRequest({
            createKbPayload: createKbPayload,
            options: options
        }, createOperationSpec, callback);
    };
    Knowledgebase.prototype.download = function (kbId, environment, options, callback) {
        return this.client.sendOperationRequest({
            kbId: kbId,
            environment: environment,
            options: options
        }, downloadOperationSpec, callback);
    };
    Knowledgebase.prototype.generateAnswer = function (kbId, generateAnswerPayload, options, callback) {
        return this.client.sendOperationRequest({
            kbId: kbId,
            generateAnswerPayload: generateAnswerPayload,
            options: options
        }, generateAnswerOperationSpec, callback);
    };
    Knowledgebase.prototype.train = function (kbId, trainPayload, options, callback) {
        return this.client.sendOperationRequest({
            kbId: kbId,
            trainPayload: trainPayload,
            options: options
        }, trainOperationSpec, callback);
    };
    return Knowledgebase;
}());
export { Knowledgebase };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listAllOperationSpec = {
    httpMethod: "GET",
    path: "knowledgebases",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: Mappers.KnowledgebasesDTO
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getDetailsOperationSpec = {
    httpMethod: "GET",
    path: "knowledgebases/{kbId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.kbId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.KnowledgebaseDTO
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "knowledgebases/{kbId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.kbId
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var publishOperationSpec = {
    httpMethod: "POST",
    path: "knowledgebases/{kbId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.kbId
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var replaceOperationSpec = {
    httpMethod: "PUT",
    path: "knowledgebases/{kbId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.kbId
    ],
    requestBody: {
        parameterPath: "replaceKb",
        mapper: __assign(__assign({}, Mappers.ReplaceKbDTO), { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "knowledgebases/{kbId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.kbId
    ],
    requestBody: {
        parameterPath: "updateKb",
        mapper: __assign(__assign({}, Mappers.UpdateKbOperationDTO), { required: true })
    },
    responses: {
        202: {
            bodyMapper: Mappers.Operation,
            headersMapper: Mappers.KnowledgebaseUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
            headersMapper: Mappers.KnowledgebaseUpdateHeaders
        }
    },
    serializer: serializer
};
var createOperationSpec = {
    httpMethod: "POST",
    path: "knowledgebases/create",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: "createKbPayload",
        mapper: __assign(__assign({}, Mappers.CreateKbDTO), { required: true })
    },
    responses: {
        202: {
            bodyMapper: Mappers.Operation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var downloadOperationSpec = {
    httpMethod: "GET",
    path: "knowledgebases/{kbId}/{environment}/qna",
    urlParameters: [
        Parameters.endpoint,
        Parameters.kbId,
        Parameters.environment
    ],
    queryParameters: [
        Parameters.source,
        Parameters.changedSince
    ],
    responses: {
        200: {
            bodyMapper: Mappers.QnADocumentsDTO
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var generateAnswerOperationSpec = {
    httpMethod: "POST",
    path: "knowledgebases/{kbId}/generateAnswer",
    urlParameters: [
        Parameters.endpoint,
        Parameters.kbId
    ],
    requestBody: {
        parameterPath: "generateAnswerPayload",
        mapper: __assign(__assign({}, Mappers.QueryDTO), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.QnASearchResultList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var trainOperationSpec = {
    httpMethod: "POST",
    path: "knowledgebases/{kbId}/train",
    urlParameters: [
        Parameters.endpoint,
        Parameters.kbId
    ],
    requestBody: {
        parameterPath: "trainPayload",
        mapper: __assign(__assign({}, Mappers.FeedbackRecordsDTO), { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=knowledgebase.js.map
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesQnamaker = {}), global.msRest));
}(this, (function (exports, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CreateKbInputDTO = {
        serializedName: "CreateKbInputDTO",
        type: {
            name: "Composite",
            className: "CreateKbInputDTO",
            modelProperties: {
                qnaList: {
                    serializedName: "qnaList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "QnADTO"
                            }
                        }
                    }
                },
                urls: {
                    serializedName: "urls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                files: {
                    serializedName: "files",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FileDTO"
                            }
                        }
                    }
                }
            }
        }
    };
    var UpdateKbOperationDTOAdd = {
        serializedName: "UpdateKbOperationDTO_add",
        type: {
            name: "Composite",
            className: "UpdateKbOperationDTOAdd",
            modelProperties: __assign({}, CreateKbInputDTO.type.modelProperties)
        }
    };
    var DeleteKbContentsDTO = {
        serializedName: "DeleteKbContentsDTO",
        type: {
            name: "Composite",
            className: "DeleteKbContentsDTO",
            modelProperties: {
                ids: {
                    serializedName: "ids",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                sources: {
                    serializedName: "sources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var UpdateKbOperationDTODelete = {
        serializedName: "UpdateKbOperationDTO_delete",
        type: {
            name: "Composite",
            className: "UpdateKbOperationDTODelete",
            modelProperties: __assign({}, DeleteKbContentsDTO.type.modelProperties)
        }
    };
    var UpdateKbContentsDTO = {
        serializedName: "UpdateKbContentsDTO",
        type: {
            name: "Composite",
            className: "UpdateKbContentsDTO",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                qnaList: {
                    serializedName: "qnaList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateQnaDTO"
                            }
                        }
                    }
                },
                urls: {
                    serializedName: "urls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                defaultAnswer: {
                    serializedName: "defaultAnswer",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateKbOperationDTOUpdate = {
        serializedName: "UpdateKbOperationDTO_update",
        type: {
            name: "Composite",
            className: "UpdateKbOperationDTOUpdate",
            modelProperties: __assign({}, UpdateKbContentsDTO.type.modelProperties)
        }
    };
    var UpdateKbOperationDTO = {
        serializedName: "UpdateKbOperationDTO",
        type: {
            name: "Composite",
            className: "UpdateKbOperationDTO",
            modelProperties: {
                add: {
                    serializedName: "add",
                    type: {
                        name: "Composite",
                        className: "UpdateKbOperationDTOAdd"
                    }
                },
                deleteProperty: {
                    serializedName: "delete",
                    type: {
                        name: "Composite",
                        className: "UpdateKbOperationDTODelete"
                    }
                },
                update: {
                    serializedName: "update",
                    type: {
                        name: "Composite",
                        className: "UpdateKbOperationDTOUpdate"
                    }
                },
                enableHierarchicalExtraction: {
                    serializedName: "enableHierarchicalExtraction",
                    type: {
                        name: "Boolean"
                    }
                },
                defaultAnswerUsedForExtraction: {
                    serializedName: "defaultAnswerUsedForExtraction",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateQuestionsDTO = {
        serializedName: "UpdateQuestionsDTO",
        type: {
            name: "Composite",
            className: "UpdateQuestionsDTO",
            modelProperties: {
                add: {
                    serializedName: "add",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                deleteProperty: {
                    serializedName: "delete",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var UpdateQnaDTOQuestions = {
        serializedName: "UpdateQnaDTO_questions",
        type: {
            name: "Composite",
            className: "UpdateQnaDTOQuestions",
            modelProperties: __assign({}, UpdateQuestionsDTO.type.modelProperties)
        }
    };
    var UpdateMetadataDTO = {
        serializedName: "UpdateMetadataDTO",
        type: {
            name: "Composite",
            className: "UpdateMetadataDTO",
            modelProperties: {
                deleteProperty: {
                    serializedName: "delete",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataDTO"
                            }
                        }
                    }
                },
                add: {
                    serializedName: "add",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataDTO"
                            }
                        }
                    }
                }
            }
        }
    };
    var UpdateQnaDTOMetadata = {
        serializedName: "UpdateQnaDTO_metadata",
        type: {
            name: "Composite",
            className: "UpdateQnaDTOMetadata",
            modelProperties: __assign({}, UpdateMetadataDTO.type.modelProperties)
        }
    };
    var UpdateContextDTO = {
        serializedName: "UpdateContextDTO",
        type: {
            name: "Composite",
            className: "UpdateContextDTO",
            modelProperties: {
                promptsToDelete: {
                    serializedName: "promptsToDelete",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                promptsToAdd: {
                    serializedName: "promptsToAdd",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PromptDTO"
                            }
                        }
                    }
                },
                isContextOnly: {
                    serializedName: "isContextOnly",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var UpdateQnaDTOContext = {
        serializedName: "UpdateQnaDTO_context",
        type: {
            name: "Composite",
            className: "UpdateQnaDTOContext",
            modelProperties: __assign({}, UpdateContextDTO.type.modelProperties)
        }
    };
    var UpdateQnaDTO = {
        serializedName: "UpdateQnaDTO",
        type: {
            name: "Composite",
            className: "UpdateQnaDTO",
            modelProperties: {
                id: {
                    serializedName: "id",
                    constraints: {
                        InclusiveMaximum: 2147483647,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                answer: {
                    serializedName: "answer",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "source",
                    constraints: {
                        MaxLength: 300
                    },
                    type: {
                        name: "String"
                    }
                },
                questions: {
                    serializedName: "questions",
                    type: {
                        name: "Composite",
                        className: "UpdateQnaDTOQuestions"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Composite",
                        className: "UpdateQnaDTOMetadata"
                    }
                },
                context: {
                    serializedName: "context",
                    type: {
                        name: "Composite",
                        className: "UpdateQnaDTOContext"
                    }
                }
            }
        }
    };
    var MetadataDTO = {
        serializedName: "MetadataDTO",
        type: {
            name: "Composite",
            className: "MetadataDTO",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    constraints: {
                        MaxLength: 500,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var QnADTO = {
        serializedName: "QnADTO",
        type: {
            name: "Composite",
            className: "QnADTO",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Number"
                    }
                },
                answer: {
                    required: true,
                    serializedName: "answer",
                    constraints: {
                        MaxLength: 25000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "source",
                    constraints: {
                        MaxLength: 300
                    },
                    type: {
                        name: "String"
                    }
                },
                questions: {
                    required: true,
                    serializedName: "questions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataDTO"
                            }
                        }
                    }
                },
                context: {
                    serializedName: "context",
                    type: {
                        name: "Composite",
                        className: "QnADTOContext"
                    }
                },
                lastUpdatedTimestamp: {
                    serializedName: "lastUpdatedTimestamp",
                    constraints: {
                        MaxLength: 300
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PromptDTOQna = {
        serializedName: "PromptDTO_qna",
        type: {
            name: "Composite",
            className: "PromptDTOQna",
            modelProperties: __assign({}, QnADTO.type.modelProperties)
        }
    };
    var PromptDTO = {
        serializedName: "PromptDTO",
        type: {
            name: "Composite",
            className: "PromptDTO",
            modelProperties: {
                displayOrder: {
                    serializedName: "displayOrder",
                    type: {
                        name: "Number"
                    }
                },
                qnaId: {
                    serializedName: "qnaId",
                    type: {
                        name: "Number"
                    }
                },
                qna: {
                    serializedName: "qna",
                    type: {
                        name: "Composite",
                        className: "PromptDTOQna"
                    }
                },
                displayText: {
                    serializedName: "displayText",
                    constraints: {
                        MaxLength: 200
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContextDTO = {
        serializedName: "ContextDTO",
        type: {
            name: "Composite",
            className: "ContextDTO",
            modelProperties: {
                isContextOnly: {
                    serializedName: "isContextOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                prompts: {
                    serializedName: "prompts",
                    constraints: {
                        MaxItems: 20
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PromptDTO"
                            }
                        }
                    }
                }
            }
        }
    };
    var QnADTOContext = {
        serializedName: "QnADTO_context",
        type: {
            name: "Composite",
            className: "QnADTOContext",
            modelProperties: __assign({}, ContextDTO.type.modelProperties)
        }
    };
    var FileDTO = {
        serializedName: "FileDTO",
        type: {
            name: "Composite",
            className: "FileDTO",
            modelProperties: {
                fileName: {
                    required: true,
                    serializedName: "fileName",
                    constraints: {
                        MaxLength: 200,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                fileUri: {
                    required: true,
                    serializedName: "fileUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var QnADocumentsDTO = {
        serializedName: "QnADocumentsDTO",
        type: {
            name: "Composite",
            className: "QnADocumentsDTO",
            modelProperties: {
                qnaDocuments: {
                    serializedName: "qnaDocuments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "QnADTO"
                            }
                        }
                    }
                }
            }
        }
    };
    var CreateKbDTO = {
        serializedName: "CreateKbDTO",
        type: {
            name: "Composite",
            className: "CreateKbDTO",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                qnaList: {
                    serializedName: "qnaList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "QnADTO"
                            }
                        }
                    }
                },
                urls: {
                    serializedName: "urls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                files: {
                    serializedName: "files",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FileDTO"
                            }
                        }
                    }
                },
                enableHierarchicalExtraction: {
                    serializedName: "enableHierarchicalExtraction",
                    type: {
                        name: "Boolean"
                    }
                },
                defaultAnswerUsedForExtraction: {
                    serializedName: "defaultAnswerUsedForExtraction",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                language: {
                    serializedName: "language",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                enableMultipleLanguages: {
                    serializedName: "enableMultipleLanguages",
                    type: {
                        name: "Boolean"
                    }
                },
                defaultAnswer: {
                    serializedName: "defaultAnswer",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReplaceKbDTO = {
        serializedName: "ReplaceKbDTO",
        type: {
            name: "Composite",
            className: "ReplaceKbDTO",
            modelProperties: {
                qnAList: {
                    required: true,
                    serializedName: "qnAList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "QnADTO"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorModel"
                            }
                        }
                    }
                },
                innerError: {
                    serializedName: "innerError",
                    type: {
                        name: "Composite",
                        className: "InnerErrorModel"
                    }
                }
            }
        }
    };
    var ErrorResponseError = {
        serializedName: "ErrorResponse_error",
        type: {
            name: "Composite",
            className: "ErrorResponseError",
            modelProperties: __assign({}, ErrorModel.type.modelProperties)
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponseError"
                    }
                }
            }
        }
    };
    var InnerErrorModel = {
        serializedName: "InnerErrorModel",
        type: {
            name: "Composite",
            className: "InnerErrorModel",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                innerError: {
                    serializedName: "innerError",
                    type: {
                        name: "Composite",
                        className: "InnerErrorModel"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                operationState: {
                    serializedName: "operationState",
                    type: {
                        name: "String"
                    }
                },
                createdTimestamp: {
                    serializedName: "createdTimestamp",
                    type: {
                        name: "String"
                    }
                },
                lastActionTimestamp: {
                    serializedName: "lastActionTimestamp",
                    type: {
                        name: "String"
                    }
                },
                resourceLocation: {
                    serializedName: "resourceLocation",
                    type: {
                        name: "String"
                    }
                },
                userId: {
                    serializedName: "userId",
                    type: {
                        name: "String"
                    }
                },
                operationId: {
                    serializedName: "operationId",
                    type: {
                        name: "String"
                    }
                },
                errorResponse: {
                    serializedName: "errorResponse",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                }
            }
        }
    };
    var KnowledgebaseDTO = {
        serializedName: "KnowledgebaseDTO",
        type: {
            name: "Composite",
            className: "KnowledgebaseDTO",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                hostName: {
                    serializedName: "hostName",
                    type: {
                        name: "String"
                    }
                },
                lastAccessedTimestamp: {
                    serializedName: "lastAccessedTimestamp",
                    type: {
                        name: "String"
                    }
                },
                lastChangedTimestamp: {
                    serializedName: "lastChangedTimestamp",
                    type: {
                        name: "String"
                    }
                },
                lastPublishedTimestamp: {
                    serializedName: "lastPublishedTimestamp",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                userId: {
                    serializedName: "userId",
                    type: {
                        name: "String"
                    }
                },
                urls: {
                    serializedName: "urls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sources: {
                    serializedName: "sources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var KnowledgebasesDTO = {
        serializedName: "KnowledgebasesDTO",
        type: {
            name: "Composite",
            className: "KnowledgebasesDTO",
            modelProperties: {
                knowledgebases: {
                    serializedName: "knowledgebases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KnowledgebaseDTO"
                            }
                        }
                    }
                }
            }
        }
    };
    var ActiveLearningSettingsDTO = {
        serializedName: "ActiveLearningSettingsDTO",
        type: {
            name: "Composite",
            className: "ActiveLearningSettingsDTO",
            modelProperties: {
                enable: {
                    serializedName: "enable",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EndpointSettingsDTOActiveLearning = {
        serializedName: "EndpointSettingsDTO_activeLearning",
        type: {
            name: "Composite",
            className: "EndpointSettingsDTOActiveLearning",
            modelProperties: __assign({}, ActiveLearningSettingsDTO.type.modelProperties)
        }
    };
    var EndpointSettingsDTO = {
        serializedName: "EndpointSettingsDTO",
        type: {
            name: "Composite",
            className: "EndpointSettingsDTO",
            modelProperties: {
                activeLearning: {
                    serializedName: "activeLearning",
                    type: {
                        name: "Composite",
                        className: "EndpointSettingsDTOActiveLearning"
                    }
                }
            }
        }
    };
    var AlterationsDTO = {
        serializedName: "AlterationsDTO",
        type: {
            name: "Composite",
            className: "AlterationsDTO",
            modelProperties: {
                alterations: {
                    required: true,
                    serializedName: "alterations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WordAlterationsDTO = {
        serializedName: "WordAlterationsDTO",
        type: {
            name: "Composite",
            className: "WordAlterationsDTO",
            modelProperties: {
                wordAlterations: {
                    required: true,
                    serializedName: "wordAlterations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AlterationsDTO"
                            }
                        }
                    }
                }
            }
        }
    };
    var EndpointKeysDTO = {
        serializedName: "EndpointKeysDTO",
        type: {
            name: "Composite",
            className: "EndpointKeysDTO",
            modelProperties: {
                primaryEndpointKey: {
                    serializedName: "primaryEndpointKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryEndpointKey: {
                    serializedName: "secondaryEndpointKey",
                    type: {
                        name: "String"
                    }
                },
                installedVersion: {
                    serializedName: "installedVersion",
                    type: {
                        name: "String"
                    }
                },
                lastStableVersion: {
                    serializedName: "lastStableVersion",
                    type: {
                        name: "String"
                    }
                },
                language: {
                    serializedName: "language",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var QueryContextDTO = {
        serializedName: "QueryContextDTO",
        type: {
            name: "Composite",
            className: "QueryContextDTO",
            modelProperties: {
                previousQnaId: {
                    serializedName: "previousQnaId",
                    type: {
                        name: "Number"
                    }
                },
                previousUserQuery: {
                    serializedName: "previousUserQuery",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var QueryDTOContext = {
        serializedName: "QueryDTO_context",
        type: {
            name: "Composite",
            className: "QueryDTOContext",
            modelProperties: __assign({}, QueryContextDTO.type.modelProperties)
        }
    };
    var AnswerSpanRequestDTO = {
        serializedName: "AnswerSpanRequestDTO",
        type: {
            name: "Composite",
            className: "AnswerSpanRequestDTO",
            modelProperties: {
                enable: {
                    serializedName: "enable",
                    type: {
                        name: "Boolean"
                    }
                },
                scoreThreshold: {
                    serializedName: "scoreThreshold",
                    type: {
                        name: "Number"
                    }
                },
                topAnswersWithSpan: {
                    serializedName: "topAnswersWithSpan",
                    constraints: {
                        InclusiveMaximum: 10,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var QueryDTOAnswerSpanRequest = {
        serializedName: "QueryDTO_answerSpanRequest",
        type: {
            name: "Composite",
            className: "QueryDTOAnswerSpanRequest",
            modelProperties: __assign({}, AnswerSpanRequestDTO.type.modelProperties)
        }
    };
    var QueryDTO = {
        serializedName: "QueryDTO",
        type: {
            name: "Composite",
            className: "QueryDTO",
            modelProperties: {
                qnaId: {
                    serializedName: "qnaId",
                    type: {
                        name: "String"
                    }
                },
                question: {
                    serializedName: "question",
                    type: {
                        name: "String"
                    }
                },
                top: {
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                },
                userId: {
                    serializedName: "userId",
                    type: {
                        name: "String"
                    }
                },
                isTest: {
                    serializedName: "isTest",
                    type: {
                        name: "Boolean"
                    }
                },
                scoreThreshold: {
                    serializedName: "scoreThreshold",
                    type: {
                        name: "Number"
                    }
                },
                context: {
                    serializedName: "context",
                    type: {
                        name: "Composite",
                        className: "QueryDTOContext"
                    }
                },
                rankerType: {
                    serializedName: "rankerType",
                    type: {
                        name: "String"
                    }
                },
                strictFilters: {
                    serializedName: "strictFilters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataDTO"
                            }
                        }
                    }
                },
                strictFiltersCompoundOperationType: {
                    serializedName: "strictFiltersCompoundOperationType",
                    type: {
                        name: "String"
                    }
                },
                answerSpanRequest: {
                    serializedName: "answerSpanRequest",
                    type: {
                        name: "Composite",
                        className: "QueryDTOAnswerSpanRequest"
                    }
                }
            }
        }
    };
    var QnASearchResultContext = {
        serializedName: "QnASearchResult_context",
        type: {
            name: "Composite",
            className: "QnASearchResultContext",
            modelProperties: __assign({}, ContextDTO.type.modelProperties)
        }
    };
    var AnswerSpanResponseDTO = {
        serializedName: "AnswerSpanResponseDTO",
        type: {
            name: "Composite",
            className: "AnswerSpanResponseDTO",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                score: {
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                },
                startIndex: {
                    serializedName: "startIndex",
                    type: {
                        name: "Number"
                    }
                },
                endIndex: {
                    serializedName: "endIndex",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var QnASearchResultAnswerSpan = {
        serializedName: "QnASearchResult_answerSpan",
        type: {
            name: "Composite",
            className: "QnASearchResultAnswerSpan",
            modelProperties: __assign({}, AnswerSpanResponseDTO.type.modelProperties)
        }
    };
    var QnASearchResult = {
        serializedName: "QnASearchResult",
        type: {
            name: "Composite",
            className: "QnASearchResult",
            modelProperties: {
                questions: {
                    serializedName: "questions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                answer: {
                    serializedName: "answer",
                    type: {
                        name: "String"
                    }
                },
                score: {
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "Number"
                    }
                },
                source: {
                    serializedName: "source",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataDTO"
                            }
                        }
                    }
                },
                context: {
                    serializedName: "context",
                    type: {
                        name: "Composite",
                        className: "QnASearchResultContext"
                    }
                },
                answerSpan: {
                    serializedName: "answerSpan",
                    type: {
                        name: "Composite",
                        className: "QnASearchResultAnswerSpan"
                    }
                }
            }
        }
    };
    var QnASearchResultList = {
        serializedName: "QnASearchResultList",
        type: {
            name: "Composite",
            className: "QnASearchResultList",
            modelProperties: {
                answers: {
                    serializedName: "answers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "QnASearchResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var FeedbackRecordDTO = {
        serializedName: "FeedbackRecordDTO",
        type: {
            name: "Composite",
            className: "FeedbackRecordDTO",
            modelProperties: {
                userId: {
                    serializedName: "userId",
                    type: {
                        name: "String"
                    }
                },
                userQuestion: {
                    serializedName: "userQuestion",
                    constraints: {
                        MaxLength: 1000
                    },
                    type: {
                        name: "String"
                    }
                },
                qnaId: {
                    serializedName: "qnaId",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FeedbackRecordsDTO = {
        serializedName: "FeedbackRecordsDTO",
        type: {
            name: "Composite",
            className: "FeedbackRecordsDTO",
            modelProperties: {
                feedbackRecords: {
                    serializedName: "feedbackRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FeedbackRecordDTO"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationsGetDetailsHeaders = {
        serializedName: "operations-getdetails-headers",
        type: {
            name: "Composite",
            className: "OperationsGetDetailsHeaders",
            modelProperties: {
                retryAfter: {
                    serializedName: "retryafter",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var KnowledgebaseUpdateHeaders = {
        serializedName: "knowledgebase-update-headers",
        type: {
            name: "Composite",
            className: "KnowledgebaseUpdateHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CreateKbInputDTO: CreateKbInputDTO,
        UpdateKbOperationDTOAdd: UpdateKbOperationDTOAdd,
        DeleteKbContentsDTO: DeleteKbContentsDTO,
        UpdateKbOperationDTODelete: UpdateKbOperationDTODelete,
        UpdateKbContentsDTO: UpdateKbContentsDTO,
        UpdateKbOperationDTOUpdate: UpdateKbOperationDTOUpdate,
        UpdateKbOperationDTO: UpdateKbOperationDTO,
        UpdateQuestionsDTO: UpdateQuestionsDTO,
        UpdateQnaDTOQuestions: UpdateQnaDTOQuestions,
        UpdateMetadataDTO: UpdateMetadataDTO,
        UpdateQnaDTOMetadata: UpdateQnaDTOMetadata,
        UpdateContextDTO: UpdateContextDTO,
        UpdateQnaDTOContext: UpdateQnaDTOContext,
        UpdateQnaDTO: UpdateQnaDTO,
        MetadataDTO: MetadataDTO,
        QnADTO: QnADTO,
        PromptDTOQna: PromptDTOQna,
        PromptDTO: PromptDTO,
        ContextDTO: ContextDTO,
        QnADTOContext: QnADTOContext,
        FileDTO: FileDTO,
        QnADocumentsDTO: QnADocumentsDTO,
        CreateKbDTO: CreateKbDTO,
        ReplaceKbDTO: ReplaceKbDTO,
        ErrorModel: ErrorModel,
        ErrorResponseError: ErrorResponseError,
        ErrorResponse: ErrorResponse,
        InnerErrorModel: InnerErrorModel,
        Operation: Operation,
        KnowledgebaseDTO: KnowledgebaseDTO,
        KnowledgebasesDTO: KnowledgebasesDTO,
        ActiveLearningSettingsDTO: ActiveLearningSettingsDTO,
        EndpointSettingsDTOActiveLearning: EndpointSettingsDTOActiveLearning,
        EndpointSettingsDTO: EndpointSettingsDTO,
        AlterationsDTO: AlterationsDTO,
        WordAlterationsDTO: WordAlterationsDTO,
        EndpointKeysDTO: EndpointKeysDTO,
        QueryContextDTO: QueryContextDTO,
        QueryDTOContext: QueryDTOContext,
        AnswerSpanRequestDTO: AnswerSpanRequestDTO,
        QueryDTOAnswerSpanRequest: QueryDTOAnswerSpanRequest,
        QueryDTO: QueryDTO,
        QnASearchResultContext: QnASearchResultContext,
        AnswerSpanResponseDTO: AnswerSpanResponseDTO,
        QnASearchResultAnswerSpan: QnASearchResultAnswerSpan,
        QnASearchResult: QnASearchResult,
        QnASearchResultList: QnASearchResultList,
        FeedbackRecordDTO: FeedbackRecordDTO,
        FeedbackRecordsDTO: FeedbackRecordsDTO,
        OperationsGetDetailsHeaders: OperationsGetDetailsHeaders,
        KnowledgebaseUpdateHeaders: KnowledgebaseUpdateHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveLearningSettingsDTO: ActiveLearningSettingsDTO,
        EndpointSettingsDTO: EndpointSettingsDTO,
        EndpointSettingsDTOActiveLearning: EndpointSettingsDTOActiveLearning,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        ErrorResponseError: ErrorResponseError,
        InnerErrorModel: InnerErrorModel
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var changedSince = {
        parameterPath: [
            "options",
            "changedSince"
        ],
        mapper: {
            serializedName: "changedSince",
            type: {
                name: "String"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var environment = {
        parameterPath: "environment",
        mapper: {
            required: true,
            serializedName: "environment",
            type: {
                name: "String"
            }
        }
    };
    var kbId = {
        parameterPath: "kbId",
        mapper: {
            required: true,
            serializedName: "kbId",
            type: {
                name: "String"
            }
        }
    };
    var keyType = {
        parameterPath: "keyType",
        mapper: {
            required: true,
            serializedName: "keyType",
            type: {
                name: "String"
            }
        }
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "String"
            }
        }
    };
    var source = {
        parameterPath: [
            "options",
            "source"
        ],
        mapper: {
            serializedName: "source",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EndpointSettings. */
    var EndpointSettings = /** @class */ (function () {
        /**
         * Create a EndpointSettings.
         * @param {QnAMakerClientContext} client Reference to the service client.
         */
        function EndpointSettings(client) {
            this.client = client;
        }
        EndpointSettings.prototype.getSettings = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getSettingsOperationSpec, callback);
        };
        EndpointSettings.prototype.updateSettings = function (endpointSettingsPayload, options, callback) {
            return this.client.sendOperationRequest({
                endpointSettingsPayload: endpointSettingsPayload,
                options: options
            }, updateSettingsOperationSpec, callback);
        };
        return EndpointSettings;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getSettingsOperationSpec = {
        httpMethod: "GET",
        path: "endpointSettings",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: EndpointSettingsDTO
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var updateSettingsOperationSpec = {
        httpMethod: "PATCH",
        path: "endpointSettings",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: "endpointSettingsPayload",
            mapper: __assign(__assign({}, EndpointSettingsDTO), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        EndpointKeysDTO: EndpointKeysDTO,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        ErrorResponseError: ErrorResponseError,
        InnerErrorModel: InnerErrorModel
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EndpointKeys. */
    var EndpointKeys = /** @class */ (function () {
        /**
         * Create a EndpointKeys.
         * @param {QnAMakerClientContext} client Reference to the service client.
         */
        function EndpointKeys(client) {
            this.client = client;
        }
        EndpointKeys.prototype.getKeys = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getKeysOperationSpec, callback);
        };
        EndpointKeys.prototype.refreshKeys = function (keyType, options, callback) {
            return this.client.sendOperationRequest({
                keyType: keyType,
                options: options
            }, refreshKeysOperationSpec, callback);
        };
        return EndpointKeys;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getKeysOperationSpec = {
        httpMethod: "GET",
        path: "endpointkeys",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: EndpointKeysDTO
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var refreshKeysOperationSpec = {
        httpMethod: "PATCH",
        path: "endpointkeys/{keyType}",
        urlParameters: [
            endpoint,
            keyType
        ],
        responses: {
            200: {
                bodyMapper: EndpointKeysDTO
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AlterationsDTO: AlterationsDTO,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        ErrorResponseError: ErrorResponseError,
        InnerErrorModel: InnerErrorModel,
        WordAlterationsDTO: WordAlterationsDTO
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Alterations. */
    var Alterations = /** @class */ (function () {
        /**
         * Create a Alterations.
         * @param {QnAMakerClientContext} client Reference to the service client.
         */
        function Alterations(client) {
            this.client = client;
        }
        Alterations.prototype.get = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getOperationSpec, callback);
        };
        Alterations.prototype.replace = function (wordAlterations, options, callback) {
            return this.client.sendOperationRequest({
                wordAlterations: wordAlterations,
                options: options
            }, replaceOperationSpec, callback);
        };
        Alterations.prototype.getAlterationsForKb = function (kbId, options, callback) {
            return this.client.sendOperationRequest({
                kbId: kbId,
                options: options
            }, getAlterationsForKbOperationSpec, callback);
        };
        Alterations.prototype.replaceAlterationsForKb = function (kbId, wordAlterations, options, callback) {
            return this.client.sendOperationRequest({
                kbId: kbId,
                wordAlterations: wordAlterations,
                options: options
            }, replaceAlterationsForKbOperationSpec, callback);
        };
        return Alterations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "alterations",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: WordAlterationsDTO
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var replaceOperationSpec = {
        httpMethod: "PUT",
        path: "alterations",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: "wordAlterations",
            mapper: __assign(__assign({}, WordAlterationsDTO), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getAlterationsForKbOperationSpec = {
        httpMethod: "GET",
        path: "alterations/{kbId}",
        urlParameters: [
            endpoint,
            kbId
        ],
        responses: {
            200: {
                bodyMapper: WordAlterationsDTO
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var replaceAlterationsForKbOperationSpec = {
        httpMethod: "PUT",
        path: "alterations/{kbId}",
        urlParameters: [
            endpoint,
            kbId
        ],
        requestBody: {
            parameterPath: "wordAlterations",
            mapper: __assign(__assign({}, WordAlterationsDTO), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AnswerSpanRequestDTO: AnswerSpanRequestDTO,
        AnswerSpanResponseDTO: AnswerSpanResponseDTO,
        ContextDTO: ContextDTO,
        CreateKbDTO: CreateKbDTO,
        CreateKbInputDTO: CreateKbInputDTO,
        DeleteKbContentsDTO: DeleteKbContentsDTO,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        ErrorResponseError: ErrorResponseError,
        FeedbackRecordDTO: FeedbackRecordDTO,
        FeedbackRecordsDTO: FeedbackRecordsDTO,
        FileDTO: FileDTO,
        InnerErrorModel: InnerErrorModel,
        KnowledgebaseDTO: KnowledgebaseDTO,
        KnowledgebasesDTO: KnowledgebasesDTO,
        KnowledgebaseUpdateHeaders: KnowledgebaseUpdateHeaders,
        MetadataDTO: MetadataDTO,
        Operation: Operation,
        PromptDTO: PromptDTO,
        PromptDTOQna: PromptDTOQna,
        QnADocumentsDTO: QnADocumentsDTO,
        QnADTO: QnADTO,
        QnADTOContext: QnADTOContext,
        QnASearchResult: QnASearchResult,
        QnASearchResultAnswerSpan: QnASearchResultAnswerSpan,
        QnASearchResultContext: QnASearchResultContext,
        QnASearchResultList: QnASearchResultList,
        QueryContextDTO: QueryContextDTO,
        QueryDTO: QueryDTO,
        QueryDTOAnswerSpanRequest: QueryDTOAnswerSpanRequest,
        QueryDTOContext: QueryDTOContext,
        ReplaceKbDTO: ReplaceKbDTO,
        UpdateContextDTO: UpdateContextDTO,
        UpdateKbContentsDTO: UpdateKbContentsDTO,
        UpdateKbOperationDTO: UpdateKbOperationDTO,
        UpdateKbOperationDTOAdd: UpdateKbOperationDTOAdd,
        UpdateKbOperationDTODelete: UpdateKbOperationDTODelete,
        UpdateKbOperationDTOUpdate: UpdateKbOperationDTOUpdate,
        UpdateMetadataDTO: UpdateMetadataDTO,
        UpdateQnaDTO: UpdateQnaDTO,
        UpdateQnaDTOContext: UpdateQnaDTOContext,
        UpdateQnaDTOMetadata: UpdateQnaDTOMetadata,
        UpdateQnaDTOQuestions: UpdateQnaDTOQuestions,
        UpdateQuestionsDTO: UpdateQuestionsDTO
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Knowledgebase. */
    var Knowledgebase = /** @class */ (function () {
        /**
         * Create a Knowledgebase.
         * @param {QnAMakerClientContext} client Reference to the service client.
         */
        function Knowledgebase(client) {
            this.client = client;
        }
        Knowledgebase.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec, callback);
        };
        Knowledgebase.prototype.getDetails = function (kbId, options, callback) {
            return this.client.sendOperationRequest({
                kbId: kbId,
                options: options
            }, getDetailsOperationSpec, callback);
        };
        Knowledgebase.prototype.deleteMethod = function (kbId, options, callback) {
            return this.client.sendOperationRequest({
                kbId: kbId,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Knowledgebase.prototype.publish = function (kbId, options, callback) {
            return this.client.sendOperationRequest({
                kbId: kbId,
                options: options
            }, publishOperationSpec, callback);
        };
        Knowledgebase.prototype.replace = function (kbId, replaceKb, options, callback) {
            return this.client.sendOperationRequest({
                kbId: kbId,
                replaceKb: replaceKb,
                options: options
            }, replaceOperationSpec$1, callback);
        };
        Knowledgebase.prototype.update = function (kbId, updateKb, options, callback) {
            return this.client.sendOperationRequest({
                kbId: kbId,
                updateKb: updateKb,
                options: options
            }, updateOperationSpec, callback);
        };
        Knowledgebase.prototype.create = function (createKbPayload, options, callback) {
            return this.client.sendOperationRequest({
                createKbPayload: createKbPayload,
                options: options
            }, createOperationSpec, callback);
        };
        Knowledgebase.prototype.download = function (kbId, environment, options, callback) {
            return this.client.sendOperationRequest({
                kbId: kbId,
                environment: environment,
                options: options
            }, downloadOperationSpec, callback);
        };
        Knowledgebase.prototype.generateAnswer = function (kbId, generateAnswerPayload, options, callback) {
            return this.client.sendOperationRequest({
                kbId: kbId,
                generateAnswerPayload: generateAnswerPayload,
                options: options
            }, generateAnswerOperationSpec, callback);
        };
        Knowledgebase.prototype.train = function (kbId, trainPayload, options, callback) {
            return this.client.sendOperationRequest({
                kbId: kbId,
                trainPayload: trainPayload,
                options: options
            }, trainOperationSpec, callback);
        };
        return Knowledgebase;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listAllOperationSpec = {
        httpMethod: "GET",
        path: "knowledgebases",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: KnowledgebasesDTO
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getDetailsOperationSpec = {
        httpMethod: "GET",
        path: "knowledgebases/{kbId}",
        urlParameters: [
            endpoint,
            kbId
        ],
        responses: {
            200: {
                bodyMapper: KnowledgebaseDTO
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "knowledgebases/{kbId}",
        urlParameters: [
            endpoint,
            kbId
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var publishOperationSpec = {
        httpMethod: "POST",
        path: "knowledgebases/{kbId}",
        urlParameters: [
            endpoint,
            kbId
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var replaceOperationSpec$1 = {
        httpMethod: "PUT",
        path: "knowledgebases/{kbId}",
        urlParameters: [
            endpoint,
            kbId
        ],
        requestBody: {
            parameterPath: "replaceKb",
            mapper: __assign(__assign({}, ReplaceKbDTO), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "knowledgebases/{kbId}",
        urlParameters: [
            endpoint,
            kbId
        ],
        requestBody: {
            parameterPath: "updateKb",
            mapper: __assign(__assign({}, UpdateKbOperationDTO), { required: true })
        },
        responses: {
            202: {
                bodyMapper: Operation,
                headersMapper: KnowledgebaseUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse,
                headersMapper: KnowledgebaseUpdateHeaders
            }
        },
        serializer: serializer$3
    };
    var createOperationSpec = {
        httpMethod: "POST",
        path: "knowledgebases/create",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: "createKbPayload",
            mapper: __assign(__assign({}, CreateKbDTO), { required: true })
        },
        responses: {
            202: {
                bodyMapper: Operation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var downloadOperationSpec = {
        httpMethod: "GET",
        path: "knowledgebases/{kbId}/{environment}/qna",
        urlParameters: [
            endpoint,
            kbId,
            environment
        ],
        queryParameters: [
            source,
            changedSince
        ],
        responses: {
            200: {
                bodyMapper: QnADocumentsDTO
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var generateAnswerOperationSpec = {
        httpMethod: "POST",
        path: "knowledgebases/{kbId}/generateAnswer",
        urlParameters: [
            endpoint,
            kbId
        ],
        requestBody: {
            parameterPath: "generateAnswerPayload",
            mapper: __assign(__assign({}, QueryDTO), { required: true })
        },
        responses: {
            200: {
                bodyMapper: QnASearchResultList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var trainOperationSpec = {
        httpMethod: "POST",
        path: "knowledgebases/{kbId}/train",
        urlParameters: [
            endpoint,
            kbId
        ],
        requestBody: {
            parameterPath: "trainPayload",
            mapper: __assign(__assign({}, FeedbackRecordsDTO), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        ErrorResponseError: ErrorResponseError,
        InnerErrorModel: InnerErrorModel,
        Operation: Operation,
        OperationsGetDetailsHeaders: OperationsGetDetailsHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {QnAMakerClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.getDetails = function (operationId, options, callback) {
            return this.client.sendOperationRequest({
                operationId: operationId,
                options: options
            }, getDetailsOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getDetailsOperationSpec$1 = {
        httpMethod: "GET",
        path: "operations/{operationId}",
        urlParameters: [
            endpoint,
            operationId
        ],
        responses: {
            200: {
                bodyMapper: Operation,
                headersMapper: OperationsGetDetailsHeaders
            },
            default: {
                bodyMapper: ErrorResponse,
                headersMapper: OperationsGetDetailsHeaders
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-qnamaker";
    var packageVersion = "3.2.0";
    var QnAMakerClientContext = /** @class */ (function (_super) {
        __extends(QnAMakerClientContext, _super);
        /**
         * Initializes a new instance of the QnAMakerClientContext class.
         * @param endpoint Supported Cognitive Services endpoint (e.g., https://< qnamaker-resource-name
         * >.api.cognitiveservices.azure.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function QnAMakerClientContext(credentials, endpoint, options) {
            var _this = this;
            if (endpoint == undefined) {
                throw new Error("'endpoint' cannot be null.");
            }
            if (credentials == undefined) {
                throw new Error("'credentials' cannot be null.");
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRest.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}/qnamaker/v5.0-preview.1";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            return _this;
        }
        return QnAMakerClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var QnAMakerClient = /** @class */ (function (_super) {
        __extends(QnAMakerClient, _super);
        /**
         * Initializes a new instance of the QnAMakerClient class.
         * @param endpoint Supported Cognitive Services endpoint (e.g., https://< qnamaker-resource-name
         * >.api.cognitiveservices.azure.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function QnAMakerClient(credentials, endpoint, options) {
            var _this = _super.call(this, credentials, endpoint, options) || this;
            _this.endpointSettings = new EndpointSettings(_this);
            _this.endpointKeys = new EndpointKeys(_this);
            _this.alterations = new Alterations(_this);
            _this.knowledgebase = new Knowledgebase(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return QnAMakerClient;
    }(QnAMakerClientContext));

    exports.Alterations = Alterations;
    exports.EndpointKeys = EndpointKeys;
    exports.EndpointSettings = EndpointSettings;
    exports.Knowledgebase = Knowledgebase;
    exports.Operations = Operations;
    exports.QnAMakerClient = QnAMakerClient;
    exports.QnAMakerClientContext = QnAMakerClientContext;
    exports.QnAMakerMappers = mappers;
    exports.QnAMakerModels = index;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-qnamaker.js.map

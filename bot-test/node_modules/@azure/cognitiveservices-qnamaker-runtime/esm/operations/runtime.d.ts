import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { QnAMakerRuntimeClientContext } from "../qnAMakerRuntimeClientContext";
/** Class representing a Runtime. */
export declare class Runtime {
    private readonly client;
    /**
     * Create a Runtime.
     * @param {QnAMakerRuntimeClientContext} client Reference to the service client.
     */
    constructor(client: QnAMakerRuntimeClientContext);
    /**
     * @summary GenerateAnswer call to query the knowledgebase.
     * @param kbId Knowledgebase id.
     * @param generateAnswerPayload Post body of the request.
     * @param [options] The optional parameters
     * @returns Promise<Models.RuntimeGenerateAnswerResponse>
     */
    generateAnswer(kbId: string, generateAnswerPayload: Models.QueryDTO, options?: msRest.RequestOptionsBase): Promise<Models.RuntimeGenerateAnswerResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param generateAnswerPayload Post body of the request.
     * @param callback The callback
     */
    generateAnswer(kbId: string, generateAnswerPayload: Models.QueryDTO, callback: msRest.ServiceCallback<Models.QnASearchResultList>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param generateAnswerPayload Post body of the request.
     * @param options The optional parameters
     * @param callback The callback
     */
    generateAnswer(kbId: string, generateAnswerPayload: Models.QueryDTO, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QnASearchResultList>): void;
    /**
     * @summary Train call to add suggestions to the knowledgebase.
     * @param kbId Knowledgebase id.
     * @param trainPayload Post body of the request.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    train(kbId: string, trainPayload: Models.FeedbackRecordsDTO, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param kbId Knowledgebase id.
     * @param trainPayload Post body of the request.
     * @param callback The callback
     */
    train(kbId: string, trainPayload: Models.FeedbackRecordsDTO, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param kbId Knowledgebase id.
     * @param trainPayload Post body of the request.
     * @param options The optional parameters
     * @param callback The callback
     */
    train(kbId: string, trainPayload: Models.FeedbackRecordsDTO, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
//# sourceMappingURL=runtime.d.ts.map